using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Discord;
using Discord.Commands;
using DradonBotSharp.Core;
using DradonBotSharp.Services;

namespace DradonBotSharp.Modules
{
    public class CoreModule : ModuleBase<SocketCommandContext>
    {

        public JsonService json { get; set; }

        [Command("info")]
        [Summary("Give the information about the bot")]
        public async Task BotInfo() => await ReplyAsync("", false, Bot.instance.BotInfo());

        [Command("ping")]
        public async Task Pong() => await ReplyAsync("pong");

        [Command("GuildInfo")]
        [RequireContext(ContextType.Guild)]
        public async Task GuildInfo()
        {
            EmbedBuilder builder = new EmbedBuilder();
            builder.WithDescription($"{Context.Guild.Name} Info - Generated by DradonBotSharp");
            builder.AddField(BotUtils.CreateEmbdedField("Guild ID", Context.Guild.Id));
            builder.AddField(BotUtils.CreateEmbdedField("Population", Context.Guild.MemberCount));
            builder.AddField(BotUtils.CreateEmbdedField("Channel count", Context.Guild.Channels.Count));
            builder.AddField(BotUtils.CreateEmbdedField("Role amount", Context.Guild.Roles.Count));
            builder.WithColor(Color.Gold);
            await ReplyAsync("", false, builder.Build());
        }

        [Command("FeaturedChannel")]
        public async Task FeatureChannel(string submitchannelID, string featuredchannelID, string emote, int numberOfReaction)
        {
            long submitID = long.Parse(submitchannelID.Replace("<#", "").Replace(">", ""));
            long featuredID = long.Parse(featuredchannelID.Replace("<#", "").Replace(">", ""));
            await ReplyAsync(json.AddChannel(submitID, featuredID, emote, numberOfReaction));
        }
    }
}
